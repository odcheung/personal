;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     markdown
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     helm
     (auto-completion :variables
                      auto-completion-complete-with-key-sequence "jk"
                      auto-completion-tab-key-behavior 'complete
                      auto-completion-return-key-behavior nil
                      auto-completion-enable-sort-by-usage t
                      auto-completion-enable-snippets-in-popup t)
     ;; better-defaults
     emacs-lisp
     git
     github
     (gtags :variables gtags-enable-by-default nil)
     org
     osx

     ;; --- language layers ---
     ruby
     javascript
     html
     react
     yaml
     sql
     python
     extra-langs

     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     ;; spell-checking
     (syntax-checking :variables
                      ;; Display errors at the bottom bar instead of in a GUI tooltip
                      syntax-checking-enable-tooltips nil

                      ;; Don't delay showing the error message
                      flycheck-display-errors-delay 0
                      )
     ;; version-control

     ;; --- additional Vim stuff ---
     evil-snipe
     evil-cleverparens
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update t
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(spacemacs-dark
                         spacemacs-light)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Menlo"
                               :size 12
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key nil
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m)
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab t
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ t
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native t
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis t
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'trailing
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  (use-package discover-my-major
    :defer t)

  (setq-default evil-escape-key-sequence "fd")
  (setq-default scroll-margin 5)

  ;; Follow symlinks automatically without asking to confirm
  (setq-default vc-follow-symlinks t)

  ;; Disable company autocompletion for specific modes
  (spacemacs|disable-company ruby-mode)
  (spacemacs|disable-company org-mode)

  (with-eval-after-load 'org
    (setq org-agenda-files '("~/Dropbox/org/main.org"
                             "~/Dropbox/org/scratch.org")))

  (with-eval-after-load 'org-capture
    (setq org-default-notes-file "~/Dropbox/org/notes.org"))

  (defun owen/find-orgfile ()
    "Open `main.org' in the current window."
    (interactive)
    (find-file-existing "~/Dropbox/org/main.org"))

  (defun owen/find-orgfile-notes ()
    "Open `notes.org' in the current window."
    (interactive)
    (find-file-existing "~/Dropbox/org/notes.org"))

  (with-eval-after-load 'projectile
    (setq projectile-switch-project-action #'projectile-dired))

  ;; --- All this is a hack to enable passing in a symbol or visual selection to helm-ag ---
  ;; ripped from packages.el
  (defun owen//helm-ag-region-or-symbol (func &optional dir)
    "Search with `ag' with a default input."
    (require 'helm-ag)
    (cl-letf* (((symbol-value 'helm-ag-insert-at-point) 'symbol)
                ;; make thing-at-point choosing the active region first
                ((symbol-function 'this-fn) (symbol-function 'thing-at-point))
                ((symbol-function 'thing-at-point)
                (lambda (thing)
                  (let ((res (if (region-active-p)
                                  (buffer-substring-no-properties
                                  (region-beginning) (region-end))
                                (this-fn thing))))
                    (when res (rxt-quote-pcre res))))))
      (funcall func dir)))

  ;; ripped from packages.el and modified to use helm-ag instead of helm-do-ag
  (defun owen/helm-ag-project-root-region-or-symbol ()
    "Search in current project with `ag' using a default input."
    (interactive)
    (let ((dir (projectile-project-root)))
      (if dir
          (owen//helm-ag-region-or-symbol 'helm-ag dir)
        (message "error: Not in a project."))))

  (with-eval-after-load 'evil-maps
    ;; Normal mode mappings
    (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
    (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
    (define-key evil-normal-state-map (kbd "H") 'back-to-indentation)
    (define-key evil-normal-state-map (kbd "L") 'end-of-line)
    (define-key evil-normal-state-map (kbd "C-l") 'evil-search-highlight-persist-remove-all)
    ;; (define-key evil-normal-state-map (kbd "g]") 'helm-etags-select)

    ;; Operator-pending mode mappings
    (define-key evil-motion-state-map (kbd "H") 'back-to-indentation)
    (define-key evil-motion-state-map (kbd "L") 'end-of-line)

    ;; gag hack
    ;; (define-key evil-normal-state-map (kbd "gag") 'evil-operator-helm-ag-project-root)
    ;; (define-key evil-motion-state-map (kbd "gag") 'evil-operator-helm-ag-project-root)

    ;; Window mappings (commands prefixed with <C-w>)
    ;; <C-w> h/j/k/l work by default.
    ;; To be less nitpicky, bind <C-w> <C-h/j/k/l> as well.
    (define-key evil-window-map (kbd "C-h") 'evil-window-left)
    (define-key evil-window-map (kbd "C-j") 'evil-window-down)
    (define-key evil-window-map (kbd "C-k") 'evil-window-up)
    (define-key evil-window-map (kbd "C-l") 'evil-window-right)
    )

  ;; To have a consistent 2 spaces indenting both on js and jsx
  (setq-default
   ;; js2-mode
   js2-basic-offset 2
   ;; web-mode
   css-indent-offset 2
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset 2
   web-mode-code-indent-offset 2
   web-mode-attr-indent-offset 2)

  ;; Highlight characters past column 100
  (with-eval-after-load 'whitespace
    (setq whitespace-line-column 100
          whitespace-style '(face lines-tail)))

  (add-hook 'prog-mode-hook 'whitespace-mode)

  ;; Vim-like word boundaries (don't allow _ to denote separate words)
  (add-hook 'prog-mode-hook (lambda () (modify-syntax-entry ?_ "w")))

  (add-hook 'fundamental-mode-hook (lambda () (modify-syntax-entry ?_ "w"))) ;; for something like helm-swoop-edit
  (add-hook 'org-mode-hook (lambda () (modify-syntax-entry ?_ "w")))

  ;; ruby-mode hooks
  ;; Fix for evil-jump-to-tag on something like Foo::Bar in ruby
  ;; Stop inserting coding: utf-8 comments at the top of files
  (add-hook 'ruby-mode-hook (lambda ()
                              (modify-syntax-entry ?: ".")
                              (setq ruby-insert-encoding-magic-comment nil)))

  ;; Word wrap for org mode
  (add-hook 'org-mode-hook #'turn-on-visual-line-mode)

  ;; Set indent level to 2 for json-mode
  (add-hook 'json-mode-hook
            (lambda ()
              (make-local-variable 'js-indent-level)
              (setq js-indent-level 2)))

  ;; Use evil-cleverparens for Emacs lisp files
  (spacemacs/toggle-evil-cleverparens-on)
  (add-hook 'emacs-lisp-mode-hook #'evil-cleverparens-mode)

  ;; Apply sql-mode to .hql files
  (add-to-list 'auto-mode-alist '("\\.hql\\'" . sql-mode))

  ;; Can't use s-lower-camel-case because I modified the syntax entry to not count "_" as
  ;; a word delimiter.
  (defun owen//s-lower-camel-case (s)
    (if (s-contains-p "_" s)
        (s-join "" (s--mapcar-head 'downcase 'capitalize (s-split "_" s)))
      (s-lower-camel-case s)))

  (defun owen/convert-symbol-to-snake-case ()
    "Convert symbol at point to snake_case. Relies on s.el."
    (require 's)
    (interactive)
    (save-excursion
      (let* ((bounds (bounds-of-thing-at-point 'symbol))
             (start (car bounds))
             (end (cdr bounds))
             (word (buffer-substring start end)))
        (delete-region start end)
        (insert (s-snake-case word)))))

  (defun owen/convert-symbol-to-camel-case ()
    "Convert symbol at point to camelCase. Relies on s.el."
    (require 's)
    (interactive)
    (save-excursion
      (let* ((bounds (bounds-of-thing-at-point 'symbol))
             (start (car bounds))
             (end (cdr bounds))
             (word (buffer-substring start end)))
        (delete-region start end)
        (insert (owen//s-lower-camel-case word)))))

  ;; Easily copy buffer's filename to clipboard. Function could be improved.
  (defun owen/copy-relative-filepath-to-clipboard ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name)))
          (project-root (projectile-project-root)))
      (kill-new (file-relative-name filename project-root))
      (message "Copied buffer relative path '%s' to clipboard." (file-relative-name filename project-root))))

  ;; Easily copy buffer's filename to clipboard. Function could be improved.
  (defun owen/copy-relative-filepath-and-line-to-clipboard ()
    "Copy the current buffer's <filename>:<linenum> to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (format "%s:%s" buffer-file-name (line-number-at-pos))))
          (project-root (projectile-project-root)))
      (kill-new (file-relative-name filename project-root))
      (message "Copied buffer relative path '%s' to clipboard." (file-relative-name filename project-root))))

  ;; Automatically set Flycheck's eslint checker to project's node_modules directory
  (defun owen/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/.bin/eslint"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))

  (add-hook 'flycheck-mode-hook #'owen/use-eslint-from-node-modules)

  ;;--- BEGIN git.musta.ch github-browse-file hacks ---
  (defun owen/github-browse-file--relative-url ()
    "Return \"username/repo\" for current repository.

Error out if this isn't a GitHub repo."
    (let ((url (vc-git--run-command-string nil "config" "remote.origin.url")))
      (unless url (error "Not in a GitHub repo"))
      (when (and url (string-match "git.musta.ch:?/?\\(.*\\)" url))
        (replace-regexp-in-string "\\.git$" "" (match-string 1 url)))))

  ;; Gbrowse with git.musta.ch (hack relying on github-browse-file package)
  (defun owen/github-browse-file--browse-url (&optional anchor)
    "Load http://github.com/user/repo/file#ANCHOR in a web browser and add it to
the kill ring."
    (let ((url (concat "https://git.musta.ch/"
                       (owen/github-browse-file--relative-url) "/"
                       (cond ((eq major-mode 'magit-status-mode) "tree")
                             ((member major-mode github-browse-file--magit-commit-link-modes) "commit")
                             (github-browse-file--view-blame "blame")
                             (t "blob")) "/"
                             (github-browse-file--current-rev) "/"
                             (github-browse-file--repo-relative-path)
                             (when anchor (concat "#" anchor)))))
      (github-browse--save-and-view url)))

  ;; Gblame with git.musta.ch (hack relying on github-browse-file package)
  (defun owen/github-browse-file-blame (&optional force-master)
    "Show the GitHub blame page for the current file. The URL for the webpage is
added to the kill ring. With a prefix argument, \"master\" is used
regardless of the current branch.

In Transient Mark mode, if the mark is active, highlight the contents of the
region."
    (interactive "P")
    (let ((github-browse-file--view-blame t))
      (owen/github-browse-file force-master)))

  (defun owen/github-browse-file (&optional force-master)
    "Show the GitHub webpage for the current file. The URL for the webpage is
added to the kill ring. With a prefix argument, \"master\" is used
regardless of the current branch.

In Transient Mark mode, if the mark is active, highlight the contents of the
region."
    (require 'github-browse-file)
    (interactive "P")
    (let ((path (github-browse-file--repo-relative-path))
          (github-browse-file--force-master force-master))
      (owen/github-browse-file--browse-url (github-browse-file--anchor-lines))))

  (defun owen/github-browse-commit ()
    "Show the GitHub page for the current commit."
    (interactive)
    (let* ((commit (github-browse-file--guess-commit))
           (url (concat "https://git.musta.ch/"
                        (github-browse-file--relative-url)
                        "/commit/"
                        commit)))
      (github-browse--save-and-view url)))
  ;;--- END git.musta.ch github-browse-file hacks ---

  ;; Debug this.
  (defun owen/neotree-open-yasnippet-dir ()
    "Open the private yasnippet directory in Neotree."
    (require 'neotree)
    (interactive)
    (neotree-dir "~/.emacs.d/private/snippets"))

  ;; --- User bindings ---
  ;; According to spacemacs documentation, SPC o is reserved for the user
  ;; Use SPC o n/p to move to next/previous errors
  (spacemacs/set-leader-keys "on" #'flycheck-next-error)
  (spacemacs/set-leader-keys "op" #'flycheck-previous-error)
  (spacemacs/set-leader-keys "o/" #'helm-ag-project-root)
  (spacemacs/set-leader-keys "oag" #'owen/helm-ag-project-root-region-or-symbol)
  (spacemacs/set-leader-keys "of" #'owen/copy-relative-filepath-to-clipboard)
  (spacemacs/set-leader-keys "oF" #'owen/copy-relative-filepath-and-line-to-clipboard)
  (spacemacs/set-leader-keys "org" #'owen/find-orgfile)
  (spacemacs/set-leader-keys "orn" #'owen/find-orgfile-notes)
  (spacemacs/set-leader-keys "orc" #'owen/convert-symbol-to-camel-case)
  (spacemacs/set-leader-keys "ors" #'owen/convert-symbol-to-snake-case)
  (spacemacs/set-leader-keys "ogho" #'owen/github-browse-file)
  (spacemacs/set-leader-keys "ogb" #'owen/github-browse-file-blame)
  (spacemacs/set-leader-keys "oy" #'owen/neotree-open-yasnippet-dir)
  )

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(js2-strict-trailing-comma-warning nil)
 '(package-selected-packages
   (quote
    (bind-key packed avy bind-map evil pcache alert yapfify pyvenv pytest pyenv-mode py-isort pip-requirements live-py-mode hy-mode helm-pydoc cython-mode company-anaconda anaconda-mode pythonic wolfram-mode thrift stan-mode scad-mode qml-mode matlab-mode julia-mode arduino-mode powerline spinner hydra request company org highlight gh auto-complete iedit minitest hide-comnt dash helm-open-github anzu undo-tree ht async mmm-mode markdown-toc markdown-mode gh-md pug-mode smartparens yasnippet magit-popup git-commit with-editor flycheck helm helm-core projectile magit evil-snipe evil-cleverparens paredit yaml-mode web-mode web-beautify tagedit sql-indent slim-mode scss-mode sass-mode rvm ruby-tools ruby-test-mode rubocop rspec-mode robe rbenv rake livid-mode skewer-mode simple-httpd less-css-mode json-mode json-snatcher json-reformat js2-refactor multiple-cursors js2-mode js-doc jade-mode helm-css-scss haml-mode emmet-mode company-web web-completion-data company-tern dash-functional tern coffee-mode chruby bundler inf-ruby xterm-color ws-butler window-numbering which-key volatile-highlights vi-tilde-fringe uuidgen use-package toc-org spacemacs-theme spaceline smeargle shell-pop reveal-in-osx-finder restart-emacs rainbow-delimiters quelpa popwin persp-mode pcre2el pbcopy paradox osx-trash osx-dictionary orgit org-projectile org-present org-pomodoro org-plus-contrib org-download org-bullets open-junk-file neotree multi-term move-text magit-gitflow magit-gh-pulls macrostep lorem-ipsum linum-relative link-hint launchctl info+ indent-guide ido-vertical-mode hungry-delete htmlize hl-todo highlight-parentheses highlight-numbers highlight-indentation help-fns+ helm-themes helm-swoop helm-projectile helm-mode-manager helm-make helm-gtags helm-gitignore helm-flx helm-descbinds helm-company helm-c-yasnippet helm-ag google-translate golden-ratio gnuplot github-search github-clone github-browse-file gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link gist ggtags flycheck-pos-tip flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu eshell-z eshell-prompt-extras esh-help elisp-slime-nav dumb-jump company-statistics column-enforce-mode clean-aindent-mode auto-yasnippet auto-highlight-symbol auto-compile aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line ac-ispell))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
