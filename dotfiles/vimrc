set encoding=utf-8

" *** abbreviate functions
function! CommandCabbr(abbreviation, expansion)
    execute 'cabbr ' . a:abbreviation . ' <c-r>=getcmdpos() == 1 && getcmdtype() == ":" ? "' . a:expansion . '" : "' . a:abbreviation . '"<CR>'
endfunction
command! -nargs=+ CommandCabbr call CommandCabbr(<f-args>)
" Use it on itself to define a simpler abbreviation for itself.
CommandCabbr ccab CommandCabbr

" *** NERDTree
CommandCabbr nt NERDTree
CommandCabbr ntf NERDTreeFind

set nocompatible

" set leader key to be space
let mapleader = "\<Space>"

" Automatically install vim-plug if it's not set up.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" vim-plug package manager setup
call plug#begin('~/.vim/plugged')

" plugins
Plug 'scrooloose/nerdtree'

Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-fugitive'
let g:fugitive_github_domains = ['github.com', 'git.musta.ch']

" fzf ------------------------------------------------------------------
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Prefix all fzf-related commands with Fzf
let g:fzf_command_prefix = 'Fzf'

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }

" Default fzf layout
" - down / up / left / right
" - window (nvim only)
let g:fzf_layout = { 'down': '~40%' }

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Command-local options

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1
" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R --languages=-javascript'

" allow us to call :FzfAg with options, also rebind CTRL-A/CTRL-D for
" select/deselect all
function! s:ag_with_opts(arg, bang)
  let tokens  = split(a:arg)
  let ag_opts = join(filter(copy(tokens), 'v:val =~ "^-"'))
  let query   = join(filter(copy(tokens), 'v:val !~ "^-"'))
  call fzf#vim#ag(query, ag_opts, a:bang ? {'options': '--bind ctrl-a:select-all,ctrl-d:deselect-all'} : {'down': '40%', 'options': '--bind ctrl-a:select-all,ctrl-d:deselect-all'})
endfunction

autocmd VimEnter * command! -nargs=* -bang FzfAg call s:ag_with_opts(<q-args>, <bang>0)

" ag word under cursor
nnoremap <silent> <Leader>ag :FzfAg <C-R><C-W><CR>

" respect .gitignore
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" fzf leader bindings and other shortcuts
nnoremap <silent> <Leader>f :FzfFiles<CR>
nnoremap <silent> <Leader>b :FzfBuffers<CR>
nnoremap <silent> <Leader>l :FzfLines<CR>
" re-enable after figuring out how to use 'gag' operator to call FzfAg
" nnoremap <silent> <Leader>a :FzfAg
CommandCabbr ag FzfAg

" ----------------------------------------------------------------------

" Use gag operator to do a FzfAg search
Plug 'owenlin0/vim-action-ag'

Plug 'pangloss/vim-javascript' " required for vim-jsx plugin to work
Plug 'mxw/vim-jsx' " syntax highlighting for JSX files

Plug 'itchyny/lightline.vim'
let g:lightline = {
      \ 'component': {
      \   'readonly': '%{&readonly?"":""}',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
      \ }

set laststatus=2 " display airline bar even when there is only one window open

Plug 'scrooloose/syntastic'
" Airbnb recommended settings
" Always add any detected errors into the location list
let g:syntastic_always_populate_loc_list = 1

" Don't auto-open it when errors/warnings are detected, but auto-close when no
" more errors/warnings are detected.
let g:syntastic_auto_loc_list = 2

" Highlight syntax errors where possible
let g:syntastic_enable_highlighting = 1

" Show this many errors/warnings at a time in the location list
let g:syntastic_loc_list_height = 5

" Don't run checkers when saving and quitting--only on saving
let g:syntastic_check_on_wq = 0

let g:syntastic_error_symbol         = '×' " There are better characters, but Hackpad won't show them
let g:syntastic_warning_symbol       = '⚠'
let g:syntastic_style_error_symbol   = '⚠'
let g:syntastic_style_warning_symbol = '⚠'

let g:syntastic_javascript_checkers    = ['eslint']
let s:eslint_path                      = system('PATH=$(npm bin):$PATH && which eslint')
let g:syntastic_javascript_eslint_exec = substitute(s:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
let g:syntastic_json_checkers          = ['jsonlint']
let g:syntastic_ruby_checkers          = ['rubocop']
let g:syntastic_scss_checkers          = ['scss_lint']
let g:syntastic_vim_checkers           = ['vint']
let g:syntastic_enable_signs = 1

" syntastic recommended settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_check_on_open = 1
" custom settings
let g:syntastic_mode_map = {
  \ "mode": "active",
  \ "passive_filetypes": ["eruby", "ruby"]
  \}
command! SC SyntasticCheck
command! SI SyntasticInfo
command! STM SyntasticToggleMode
command! LC Errors
" have :q also close syntastic if it's open
cabbrev q lcl\|q
cabbrev wq w\|silent!lcl\|q

" For monorail Ruby files
let g:syntastic_ruby_rubocop_args = "-c /Users/owen_lin/repos/airbnb/.rubocop.yml"

" Debug syntastic
" let g:syntastic_debug=1

" Easily define new text objects
Plug 'kana/vim-textobj-user'

" ------ Custom text objects (requires kana/vim-textobj-user) ------
" Ruby text objects (method text objects already work, but this adds support
" for Ruby blocks)
" ir/ar
Plug 'nelstrom/vim-textobj-rubyblock'

" Improved text objects and allows forward/backward seeking
Plug 'wellle/targets.vim'

" Comment text object
" ic/ac
Plug 'glts/vim-textobj-comment'

" Text object for sections of camelCase or snake_case
" iv/av
Plug 'Julian/vim-textobj-variable-segment'
" ------ end custom text objects ------

" Hive syntax highlighting
Plug 'autowitch/hive.vim'

Plug 'justinmk/vim-sneak'

" ------ Ultisnips ------
Plug 'SirVer/ultisnips'
" Trigger configuration
let g:UltiSnipsExpandTrigger="<tab>"

" :UltiSnipsEdit opens in a vertical split
let g:UltiSnipsEditSplit="vertical"

let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/ultisnips']
" ------ end Ultisnips ------

call plug#end()            " required

" Non-plugin related setup 
color desert
filetype plugin indent on
set nu
set backspace=indent,eol,start
syntax enable
set showmode
set showcmd
set wildmenu
set ruler<
runtime ftplugin/man.vim
set expandtab
set nowrap
set hlsearch
set showmatch
set ignorecase
set smartcase
" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>
" Indent options
set tabstop=2
set shiftwidth=2
set expandtab
set modifiable " to create files/directories in NERDTree
set splitbelow
set splitright

" Improve automatic formatting
if v:version > 703 || v:version == 703 && has('patch541')
  set formatoptions+=j " remove comment leader when joining comment lines
endif

set formatoptions+=c " auto-wrap comments using textwidth
set formatoptions+=n " smart auto-indenting inside numbered lists
set formatoptions+=q " allow formatting of comments with `gq`
set nojoinspaces " don't autoinsert two spaces after '.', '?', '!' for join command

" *** strip trailing whitespace for certain files
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,yaml,yml,js,css,scss,erb,hive autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" persistent undo
if !isdirectory($HOME."/.vim")
  call mkdir($HOME."/.vim")
endif
if !isdirectory($HOME."/.vim/undo")
  call mkdir($HOME."/.vim/undo")
endif
set undodir=$HOME/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000

" disable Ctrl-w o
map <C-w>o <Nop>

" allow % to jump around if/elsif/else/end and XML tags
runtime macros/matchit.vim

" Search for visually selected text, forwards with '*' or backwards with '#'.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" show lines above and below search results
set scrolloff=10

" Easy expansion of the active file directory in Command mode
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Incremental search
set incsearch

" Makes & repeat the last substitution with flags
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" Set up omni complete, accessed with <C-x><C-o> in insert mode
set omnifunc=syntaxcomplete#Complete

" Trying out jj/jk to exit insert mode
inoremap jj <Esc>
inoremap jk <Esc>

" Make Y yank to end of line
nnoremap Y y$

" Remap H and L to be ^ and $ respectively
noremap H ^
noremap L $

" ------ Leader mappings ------
" Easy save
nnoremap <Leader>w :w<CR>

" Simplify system clipboard interaction
nnoremap <Leader>y "+y
vnoremap <Leader>y "+y
nnoremap <Leader>Y "+y$
vnoremap <Leader>Y "+y

nnoremap <Leader>d "+d
vnoremap <Leader>d "+d
nnoremap <Leader>d "+D
vnoremap <Leader>d "+D

nnoremap <Leader>p "+p
vnoremap <Leader>p "+p
nnoremap <Leader>P "+P
vnoremap <Leader>P "+P

" Easily edit / source vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Easily edit snippets
nnoremap <leader>ur :vsplit $HOME/.vim/ultisnips/ruby.snippets<cr>
nnoremap <leader>ujs :vsplit $HOME/.vim/ultisnips/javascript.snippets<cr>
nnoremap <leader>uhtml :vsplit $HOME/.vim/ultisnips/html.snippets<cr>
nnoremap <leader>ugit :vsplit $HOME/.vim/ultisnips/gitcommit.snippets<cr>

" Easily view / edit search and replace commands
nnoremap <leader>er :vsplit $HOME/.vim/searchreplace.vim<cr>

" Nice feature for .txt files, set wrap and only break on whitespace
" http://stackoverflow.com/questions/19624105/how-can-i-make-vim-break-lines-only-on-whitespace
" :set nolist wrap linebreak breakat&vim
" nnoremap j gj
" nnoremap k gk

" Hive syntax highlighting (using autowitch/hive.vim plugin)
" .hql
autocmd BufNewFile,BufRead *.hql set filetype=hive expandtab
" .q
autocmd BufNewFile,BufRead *.q set filetype=hive expandtab

" Learn Vimscript the hard way exercises
nnoremap <leader>" viw<Esc>a"<Esc>hbi"<Esc>lel
nnoremap <leader>' viw<Esc>a'<Esc>hbi'<Esc>lel
vnoremap <Leader>" <Esc>`>a"<Esc>`<i"<Esc>
vnoremap <Leader>' <Esc>`>a'<Esc>`<i'<Esc>
